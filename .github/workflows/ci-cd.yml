name: CI/CD Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push client image
        uses: docker/build-push-action@v4
        with:
          context: ./client
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/noteme-client:latest
      
      - name: Build and push server image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/noteme-server:latest
      
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/note.me
            git pull
            
            # Export environment variables for docker-compose
            export MONGODB_URI='${{ secrets.MONGODB_URI }}'
            export JWT_SECRET='${{ secrets.JWT_SECRET }}'
            
            # Create docker-compose file (without Prometheus and Grafana)
            cat > docker-compose.prod.yml << EOL
            version: '3'
            services:
              client:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/noteme-client:latest
                environment:
                  - REACT_APP_API_URL=http://${{ secrets.EC2_HOST }}:5000
                ports:
                  - "3000:80"
                restart: always
              server:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/noteme-server:latest
                environment:
                  - PORT=5000
                  - MONGODB_URI=\${MONGODB_URI}
                  - CORS_ORIGIN=http://${{ secrets.EC2_HOST }}:3000
                  - JWT_SECRET=\${JWT_SECRET}
                  - NODE_ENV=production
                ports:
                  - "5000:5000"
                restart: always
            EOL
            
            # Pull latest images
            docker-compose -f docker-compose.prod.yml pull
            
            # Restart the containers with environment variables passed from shell
            docker-compose -f docker-compose.prod.yml down
            docker-compose -f docker-compose.prod.yml up -d